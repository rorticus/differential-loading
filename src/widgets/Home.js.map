{"version":3,"sources":["webpack://lib_diff_test/block.ts","webpack://lib_diff_test/./node_modules/@dojo/webpack-contrib/build-time-render/bridge.js","webpack://lib_diff_test/./src/widgets/Home.tsx","webpack://lib_diff_test/./src/widgets/styles/Home.m.css"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAkF;AACpD;AAE9B,MAAM,YAAY,GAAG,oDAAM,CAAC,EAAE,kDAAK,EAAE,uDAAM,EAAE,CAAC,CAAC;AAExC,MAAM,KAAK,GAAG,YAAY,CAAC,CAAC,EAAE,UAAU,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE;IACvE,IAAI,EAAE,GAAG,CAAC,CAAC;IACX,OAAO,CAAoC,MAAS,EAAE,EAAE;QACvD,OAAO,CAAC,GAAG,IAAmB,EAAuE,EAAE;YACtG,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACxC,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC;YAC5C,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;YACpC,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,QAAQ,IAAI,UAAU,EAAE,EAAE,KAAK,IAAI,EAAE;gBAC3E,iEAAmB,EAAE,CAAC;gBACtB,MAAM,GAAG,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC;gBAC5B,KAAK,CAAC,KAAK,EAAE,CAAC;gBACd,MAAM,MAAM,GAAG,MAAM,GAAG,CAAC;gBACzB,iEAAmB,EAAE,CAAC;gBACtB,KAAK,CAAC,MAAM,EAAE,CAAC;gBACf,OAAO,MAAM,CAAC;YACf,CAAC,CAAC,CAAC;YACH,OAAO,WAAW,IAAI,IAAI,CAAC;QAC5B,CAAC,CAAC;IACH,CAAC,CAAC;AACH,CAAC,CAAC,CAAC;AAEY,oEAAK,EAAC;;;;;;;;;;;;;AC1BrB;AAAA;AAAA;AAAA;AAC2C;AACM;;AAElC;AACf;AACA,iBAAiB,WAAW;AAC5B,KAAK,wEAAG,yBAAyB,mEAAM;AACvC,SAAS,mEAAM;AACf;AACA;AACA;AACA,MAAM,mEAAM;AACZ,GAAG,mEAAM;AACT,GAAG,mEAAM;AACT;AACA,UAAU,mEAAM;AAChB;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;ACpBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACE;AAEf;AACF;AAEzC,MAAM,OAAO,GAAG,wEAAM,CAAC,EAAE,oFAAK,EAAE,CAAC,CAAC;AAEnB,sEAAO,CAAC,SAAS,IAAI,CAAC,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,EAAC;IAC5D,OAAO;QACN,8EAAI,OAAO,EAAE,CAAC,uDAAQ,CAAC,gBAAgB;QACvC,mFACE,KAAK,CAAC,uDAAQ,CAAC,EAAE,CACb,CACD,CAAC;AACR,CAAC,CAAC,EAAC;;;;;;;;;;;;ACfH;AACA,kBAAkB,6D","file":"src/widgets/Home.js","sourcesContent":["import { create, defer, decrementBlockCount, incrementBlockCount } from '../vdom';\nimport icache from './icache';\n\nconst blockFactory = create({ defer, icache });\n\nexport const block = blockFactory(({ middleware: { icache, defer } }) => {\n\tlet id = 1;\n\treturn <T extends (...args: any[]) => any>(module: T) => {\n\t\treturn (...args: Parameters<T>): (ReturnType<T> extends Promise<infer U> ? U : ReturnType<T>) | null => {\n\t\t\tconst argsString = JSON.stringify(args);\n\t\t\tconst moduleId = icache.get(module) || id++;\n\t\t\ticache.set(module, moduleId, false);\n\t\t\tconst cachedValue = icache.getOrSet(`${moduleId}-${argsString}`, async () => {\n\t\t\t\tincrementBlockCount();\n\t\t\t\tconst run = module(...args);\n\t\t\t\tdefer.pause();\n\t\t\t\tconst result = await run;\n\t\t\t\tdecrementBlockCount();\n\t\t\t\tdefer.resume();\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\treturn cachedValue || null;\n\t\t};\n\t};\n});\n\nexport default block;\n","var modulePath = 'src/fileList.block';\nimport has from '@dojo/framework/core/has';\nimport global from '@dojo/framework/shim/global';\n\nexport default function () {\n\tvar args = Array.prototype.slice.call(arguments);\n\t/** @preserve {{ REPLACE }} **/\n\tif (has('build-time-render') && global.__dojoBuildBridge) {\n\t\treturn global.__dojoBuildBridge(modulePath, args);\n\t}\n\telse {\n\t\tvar stringifiedArgs = JSON.stringify(args);\n\t\tif (global.__dojoBuildBridgeCache &&\n\t\t\tglobal.__dojoBuildBridgeCache[modulePath] &&\n\t\t\tglobal.__dojoBuildBridgeCache[modulePath][stringifiedArgs]\n\t\t) {\n\t\t\treturn global.__dojoBuildBridgeCache[modulePath][stringifiedArgs]();\n\t\t}\n\t\treturn undefined;\n\t}\n}\n","import { tsx, create } from '@dojo/framework/core/vdom';\nimport block from '@dojo/framework/core/middleware/block';\n\nimport * as css from './styles/Home.m.css';\nimport fileList from '../fileList.block';\n\nconst factory = create({ block });\n\nexport default factory(function Home({ middleware: { block }}) {\n\treturn <div>\n\t\t<h1 classes={[css.root]}>Home Page</h1>\n\t\t<pre>\n\t\t\t{block(fileList)()}\n\t\t</pre>\n\t</div>;\n});\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\" _key\":\"diff-test/Home\",\"root\":\"Home-m__root__df891dZELU5\"};"],"sourceRoot":""}